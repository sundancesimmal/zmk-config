/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"
#include "zmk-helpers/unicode-chars/german.dtsi"

#define QUICK_TAP_MS 175

#define DEF 0
#define NUM 1
#define NAV 2

/* Homerow mods */
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2						       // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)

ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
              tapping-term-ms = <200>;)
	      
// Tap: left/right parenthesis | Shft + tap: less-than/greater-than.
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
              tapping-term-ms = <200>;)

// Sticky shift + leader.
ZMK_MACRO(leader_sft, bindings = <&sk LSHFT &leader>;)

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

/* Combos, leader key sequences, mouse emulation */

#include "combos.dtsi" // Must be sourced after HRM-combo hack.
#include "leader.dtsi"

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &none     &kp Q         &kp W         &kp E        &kp R         &kp T         &kp Y         &kp U          &kp I         &kp O       &kp P          &none
   &none     &hml LGUI A   &hml LALT S   &hml LCTRL D &hml LSHIFT F &kp G         &kp H         &hmr RSHIFT J  &hmr LCTRL K  &hmr LALT L &hmr LGUI SEMI &none
   &none     &kp Z         &kp X         &kp C        &kp V         &kp B         &kp N         &kp M          &kp COMMA     &kp DOT     &kp FSLH       &none
                                         &none        &kp RET       &lt NAV ESC   &lt NUM BSPC  &kp SPACE      &none
                        >;
                };
                num_layer {
                        bindings = <
   &none      &kp N1       &kp N2       &kp N3       &kp N4        &kp N5        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &none
   &none      &kp N6       &kp N7       &kp N8       &kp N9        &kp N0        &kp LEFT      &kp DOWN      &kp UP       &kp RIGHT    &trans          &none
   &none      &trans       &trans       &trans       &trans        &trans        &trans        &trans        &trans       &trans       &trans          &none
                                        &none        &kp RET       &lt NAV ESC   &lt NUM BSPC  &kp SPACE     &none
                        >;
                };

                nav_layer {
                        bindings = <
   &none    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &trans        &kp HOME      &kp END      &trans      &trans       &none
   &none    &BT_CLEAR    &trans       &trans       &bootloader  &sys_reset       &kp LEFT      &kp DOWN      &kp UP       &kp RIGHT   &kp PG_UP    &none
   &none    &trans   &trans &trans   &trans   &trans                             &kp UNDER     &kp PLUS      &kp LBRC     &kp RBRC    &kp PG_DOWN  &none
                                        &none        &kp RET       &lt NAV ESC   &lt NUM BSPC  &kp SPACE     &none
                        >;
                };
        };
};
